;module
(env-push)

(defun cook_key (key_code key mod)
	(and (/= (logand mod (const (logior +ev_key_mod_caps_lock +ev_key_mod_shift))) 0)
		(defq i (find (char key) "§1234567890-=qwertyuiop[]asdfghjkl;\`zxcvbnm,./'"))
		(setq key (code (elem-get i (const (cat "±!@#$%^&*()_+QWERTYUIOP{}ASDFGHJKL:|~ZXCVBNM<>?" (char 34)))))))
	key)

(defun set-mouse-id ()
	(bind '(view _ _) (. *screen* :hit_tree *mouse_x* *mouse_y*))
	(unless view (setq view *screen*))
	(when (/= (defq mouse_id (. view :get_id)) *mouse_id*)
		(and (defq old_view (. *screen* :find_id *mouse_id*))
			(defq owner (. old_view :find_owner))
			(mail-send owner (setf-> (str-alloc +ev_msg_exit_size)
				(+ev_msg_type +ev_type_exit)
				(+ev_msg_target_id *mouse_id*))))
		(setq *mouse_id* mouse_id)
		(and (defq owner (. view :find_owner))
			(mail-send owner (setf-> (str-alloc +ev_msg_enter_size)
				(+ev_msg_type +ev_type_enter)
				(+ev_msg_target_id *mouse_id*))))) view)

(defun action-mouse-wheel ()
	(mouse-type (defq view (set-mouse-id))
		(- *mouse_x* (getf view +view_ctx_x 0))
		(- *mouse_y* (getf view +view_ctx_y 0)))
	(if (defq owner (. view :find_owner))
		(mail-send owner (setf-> (str-alloc +ev_msg_wheel_size)
			(+ev_msg_type +ev_type_wheel)
			(+ev_msg_target_id *mouse_id*)
			(+ev_msg_wheel_x (getf msg +sdl_mouse_wheel_event_x))
			(+ev_msg_wheel_y (getf msg +sdl_mouse_wheel_event_y))
			(+ev_msg_wheel_direction (getf msg +sdl_mouse_wheel_event_direction))))))

(defun action-mouse-motion ()
	(setq *mouse_x* (getf msg +sdl_mouse_motion_event_x)
		*mouse_y* (getf msg +sdl_mouse_motion_event_y)
		*mouse_buttons* (getf msg +sdl_mouse_motion_event_state))
	(when (= *mouse_buttons* 0) (set-mouse-id))
	(and (defq view (. *screen* :find_id *mouse_id*))
		(defq owner (. view :find_owner))
		(mail-send owner (setf-> (str-alloc +ev_msg_mouse_size)
			(+ev_msg_type +ev_type_mouse)
			(+ev_msg_target_id *mouse_id*)
			(+ev_msg_mouse_x *mouse_x*)
			(+ev_msg_mouse_y *mouse_y*)
			(+ev_msg_mouse_rx (- *mouse_x* (getf view +view_ctx_x 0)))
			(+ev_msg_mouse_ry (- *mouse_y* (getf view +view_ctx_y 0)))
			(+ev_msg_mouse_buttons *mouse_buttons*)
			(+ev_msg_mouse_count 0))))
	(mouse-type view
		(- *mouse_x* (getf view +view_ctx_x 0))
		(- *mouse_y* (getf view +view_ctx_y 0))))

(defun action-mouse-button-down ()
	(setq *mouse_x* (getf msg +sdl_mouse_button_event_x)
		*mouse_y* (getf msg +sdl_mouse_button_event_y)
		*mouse_buttons* (logior *mouse_buttons* (getf msg +sdl_mouse_button_event_button)))
	(and (defq view (set-mouse-id))
		(defq owner (. view :find_owner))
		(mail-send owner (setf-> (str-alloc +ev_msg_mouse_size)
			(+ev_msg_type +ev_type_mouse)
			(+ev_msg_target_id *mouse_id*)
			(+ev_msg_mouse_x *mouse_x*)
			(+ev_msg_mouse_y *mouse_y*)
			(+ev_msg_mouse_rx (- *mouse_x* (getf view +view_ctx_x 0)))
			(+ev_msg_mouse_ry (- *mouse_y* (getf view +view_ctx_y 0)))
			(+ev_msg_mouse_buttons *mouse_buttons*)
			(+ev_msg_mouse_count (getf msg +sdl_mouse_button_event_clicks))))))

(defun action-mouse-button-up ()
	(setq *mouse_x* (getf msg +sdl_mouse_button_event_x)
		*mouse_y* (getf msg +sdl_mouse_button_event_y)
		*mouse_buttons* (logand *mouse_buttons* (lognot (getf msg +sdl_mouse_button_event_button))))
	(and (defq view (. *screen* :find_id *mouse_id*))
		(defq owner (. view :find_owner))
		(mail-send owner (setf-> (str-alloc +ev_msg_mouse_size)
			(+ev_msg_type +ev_type_mouse)
			(+ev_msg_target_id *mouse_id*)
			(+ev_msg_mouse_x *mouse_x*)
			(+ev_msg_mouse_y *mouse_y*)
			(+ev_msg_mouse_rx (- *mouse_x* (getf view +view_ctx_x 0)))
			(+ev_msg_mouse_ry (- *mouse_y* (getf view +view_ctx_y 0)))
			(+ev_msg_mouse_buttons *mouse_buttons*)
			(+ev_msg_mouse_count (getf msg +sdl_mouse_button_event_clicks)))))
	(mouse-type (defq view (set-mouse-id))
		(- *mouse_x* (getf view +view_ctx_x 0))
		(- *mouse_y* (getf view +view_ctx_y 0))))

(defun action-key-down ()
	(defq view (set-mouse-id)
		key_code (getf msg +sdl_keyboard_event_scancode)
		key (getf msg +sdl_keyboard_event_sym)
		mod (getf msg +sdl_keyboard_event_mod))
	(mouse-type view
		(- *mouse_x* (getf view +view_ctx_x 0))
		(- *mouse_y* (getf view +view_ctx_y 0)))
	(if (defq owner (. view :find_owner))
		(mail-send owner (setf-> (str-alloc +ev_msg_key_size)
			(+ev_msg_type +ev_type_key)
			(+ev_msg_target_id *mouse_id*)
			(+ev_msg_key_keycode key_code)
			(+ev_msg_key_key (cook_key key_code key mod))
			(+ev_msg_key_mod mod)))))

(defun action-window ()
	(cond
		((= (defq event (getf msg +sdl_window_event_event)) +SDL_WINDOWEVENT_SIZE_CHANGED)
			(.-> *screen*
				(:set_bounds 0 0
					(getf msg +sdl_window_event_data1)
					(getf msg +sdl_window_event_data2))
				(:set_flags +view_flag_dirty_all +view_flag_dirty_all))
			(each (lambda (child)
				(mail-send (. child :find_owner)
					(setf-> (str-alloc +ev_msg_gui_size)
						(+ev_msg_type +ev_type_gui)
						(+ev_msg_target_id (. child :get_id))))) (. *screen* :children))
			(gui-update *mouse_x* *mouse_y* 1))
		((or (= event +SDL_WINDOWEVENT_SHOWN) (= event +SDL_WINDOWEVENT_RESTORED))
			(. *screen* :set_flags +view_flag_dirty_all +view_flag_dirty_all))))

(defun action-quit ()
	;send quit action to all GUI apps
	;action 0 is reservered for close !
	(each (lambda (child)
		(when (defq mbox (. child :find_owner))
			(defq source_id (. child :get_id))
			(mail-send mbox (setf-> (str-alloc +ev_msg_action_size)
				(+ev_msg_type +ev_type_action)
				(+ev_msg_target_id 0)
				(+ev_msg_action_source_id source_id)))))
		(. *screen* :children))
	;send GUI force quit event...
	(setq *running* :t))

(defq event_map (fmap-kv
	+SDL_MOUSEWHEEL action-mouse-wheel
	+SDL_MOUSEMOTION action-mouse-motion
	+SDL_MOUSEBUTTONDOWN action-mouse-button-down
	+SDL_MOUSEBUTTONUP action-mouse-button-up
	+SDL_KEYDOWN action-key-down
	+SDL_WINDOWEVENT action-window
	+SDL_QUIT action-quit))

;module
(export-symbols
	event_map)
(env-pop)
