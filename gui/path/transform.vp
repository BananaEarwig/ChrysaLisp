(include "lib/asm/func.inc")
(include "gui/path/class.inc")
(include "sys/math/class.inc")

(def-method 'path :transform)
	;inputs
	;:r0 = path object (ptr)
	;:r1 = source path object, can be same (ptr)
	;:r2 = m3x2 (fixeds)
	;outputs
	;:r0 = path object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this that m3x2)
		(pptr iter_begin iter_end iter_this))

	(push-scope)
	(entry 'path :transform {this, that, m3x2})

	(call 'path :get_both {that} {_, iter_begin, iter_end})
	(call 'path :get_begin {this} {_, iter_this})
	(call 'fixeds :get_begin {m3x2} {_, m3x2})

	(vec-set 0)
	(vec-load 4 {iter_end, iter_begin, iter_this, m3x2})
	(bind '(e i j k) (vec-top 4))
	(vec-load-long 2 k)
	(defq m1 (vec-top 2))
	(vec-load-long 2 k (* 3 +long_size))
	(defq m2 (vec-top 2))
	(vec-load-long 1 k (* 2 +long_size))
	(vec-load-long 1 k (* 5 +long_size))
	(defq tr (vec-top 2))

	(loop-while (list i '/= e))
		(vec-load-long 2 i)
		(defq xy (vec-top 2))

		(vec-dup 2 m1)
		(vec-fdot 2 xy)
		(vec-dup 2 m2)
		(vec-fdot 2 xy)
		(vec-add 2 tr)
		(vec-store-long 2 j)
		(vp-add-cr (* 2 +long_size) i)
		(vp-add-cr (* 2 +long_size) j)
	(loop-end)

	(exit 'path :transform {this})
	(pop-scope)
	(return)

(def-func-end)
