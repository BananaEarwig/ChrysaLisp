(include "lib/asm/func.inc")
(include "class/sym/class.inc")
(include "class/hmap/class.inc")
(include "class/list/class.inc")
(include "./class.inc")
(include "././canvas/class.inc")
(include "././texture/class.inc")
(include "class/stream/class.inc")
(include "class/sstream/class.inc")
(include "class/fstream/class.inc")
(include "sys/str/class.inc")
(include "././gui/class.inc")
(include "lib/consts/colors.inc")
(include "sys/statics/class.inc")

(gen-vtable 'pixmap)

(def-method 'pixmap :create)
	;inputs
	;:r0 = width (pixels)
	;:r1 = height (pixels)
	;outputs
	;:r0 = 0 if error, else pixmap object (ptr)
	;trashes
	;:r1-:r6

	;save size of data
	(entry 'pixmap :create '(:r0 :r1))
	(assign '(:r0 :r1) '(:r5 :r6))

	;create new pixmap object
	(vp-mul-rr :r1 :r0)
	(vp-mul-cr +int_size :r0)
	(vp-add-cr pixmap_data :r0)
	(call 'sys_mem :alloc '(:r0) '(:r0 _))
	(vpif '(:r0 /= 0))
		;init the object
		(call 'pixmap :init `(:r0 (@ ,(f-path 'pixmap :vtable)) :r5 :r6) '(:r0 :r1))
		(vpif '(:r1 = 0))
			;error with init
			(call 'sys_mem :free '(:r0))
			(vp-xor-rr :r0 :r0)
		(endif)
	(endif)

	(exit 'pixmap :create '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :init)
	;inputs
	;:r0 = pixmap object (ptr)
	;:r1 = vtable (pptr)
	;:r2 = width (pixels)
	;:r3 = height (pixels)
	;outputs
	;:r0 = pixmap object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r14

	(entry 'pixmap :init '(:r0 :r1 :r2 :r3))
	(assign '(:r2 :r3) '((:r0 pixmap_width) (:r0 pixmap_height)))
	(vp-mul-cr +int_size :r2)
	(assign '(:r2) '((:r0 pixmap_stride)))

	;init parent
	(s-call 'pixmap :init '(:r0 :r1) '(:r0 :r1))
	(vpif '(:r1 /= 0))
		(vp-push :r0)
		(assign '(0 -32) '(:r1 :r2))
		(assign '(:r1 :r1 :r1 :r1 :r2)
			'((:r0 pixmap_texture) (:r0 pixmap_stream) (:r0 pixmap_bufp) (:r0 pixmap_stream_type)
			 (:r0 pixmap_type)))

		;clear pixel buffer
		(assign '((:r0 pixmap_height) (:r0 pixmap_stride)) '(:r1 :r2))
		(vp-mul-rr :r2 :r1)
		(call 'sys_mem :fill '((& :r0 pixmap_data) :r1 0))
		(vp-pop :r0)
	(endif)

	(exit 'pixmap :init '(:r0 :r1))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :deinit)
	;inputs
	;:r0 = pixmap object (ptr)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r1-:r14

	(vp-push :r0)

	;free any flm stream
	(call 'stream :deref_if '((:r0 pixmap_stream)))

	;free any texture
	(assign '((:rsp 0)) '(:r0))
	(call 'texture :deref_if '((:r0 pixmap_texture)))

	(vp-pop :r0)
	(s-jump 'pixmap :deinit '(:r0))

(def-func-end)

(def-method 'pixmap :upload 16)
	;inputs
	;:r0 = pixmap object (ptr)
	;:r1 = pixmap upload flags (uint)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this)
		(uint flags))

	(def-vars
		(struct frame local_size))

	(push-scope)
	(entry 'pixmap :upload {frame.local_this, frame.local_flags})

	(call 'sys_task :callback {&frame, $callback})

	(exit 'pixmap :upload {frame.local_this})
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;:r0 = user data

	(def-vars
		(ptr user this old_stack)
		(ulong tex_id))

	(vp-cpy-rr :rsp :r1)
	(push-scope)
	(vp-and-cr -16 :rsp)
	(entry {user, old_stack})

	;free any texture
	(assign {user->local_this} {this})
	(call 'texture :deref_if {this->pixmap_texture})

	;create SDL surface from pixel buffer, convert to texture
	(host-gui-call 'host_gui :create_texture {&this->pixmap_data,
			this->pixmap_width, this->pixmap_height,
			this->pixmap_stride, user->local_flags}
		{tex_id})

	;new texture
	(call 'texture :create {tex_id, this->pixmap_width, this->pixmap_height} {this->pixmap_texture})

	(assign {old_stack} '(:rsp))
	(pop-scope-syms)
	(return)

(def-func-end)

(def-method 'pixmap :to_premul)
	;inputs
	;:r1 = color (argb)
	;outputs
	;:r1 = color premul (argb)
	;trashes
	;:r1-:r3

	(entry 'pixmap :to_premul '(:r1))

	(vp-cpy-rr :r1 :r2)
	(vp-cpy-rr :r1 :r3)
	(vp-shr-cr 24 :r1)
	(vp-and-cr 0xff00ff :r2)
	(vp-and-cr 0xff00 :r3)
	(vp-mul-rr :r1 :r2)
	(vp-mul-rr :r1 :r3)
	(vp-shl-cr 24 :r1)
	(vp-shr-cr 8 :r2)
	(vp-shr-cr 8 :r3)
	(vp-and-cr 0xff00ff :r2)
	(vp-and-cr 0xff00 :r3)
	(vp-add-rr :r2 :r1)
	(vp-add-rr :r3 :r1)

	(exit 'pixmap :to_premul '(:r1))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :to_argb)
	;inputs
	;:r1 = color premul (argb)
	;outputs
	;:r1 = color (argb)
	;trashes
	;:r1-:r4

	(entry 'pixmap :to_argb '(:r1))

	(vp-cpy-rr :r1 :r3)
	(vp-shr-cr 24 :r3)
	(vpif '(:r3 /= 0) '(:r3 /= 0xff))
		(vp-cpy-rr :r0 :r4)
		(vp-xor-rr :r2 :r2)
		(vp-cpy-cr (* 255 256) :r0)
		(vp-div-rrr-u :r3 :r2 :r0)
		(vp-cpy-rr :r1 :r3)
		(vp-cpy-rr :r1 :r2)
		(vp-shr-cr 24 :r1)
		(vp-and-cr 0xff00ff :r3)
		(vp-and-cr 0xff00 :r2)
		(vp-mul-rr :r0 :r3)
		(vp-mul-rr :r0 :r2)
		(vp-shl-cr 24 :r1)
		(vp-shr-cr 8 :r3)
		(vp-shr-cr 8 :r2)
		(vp-and-cr 0xff00ff :r3)
		(vp-and-cr 0xff00 :r2)
		(vp-add-rr :r3 :r1)
		(vp-add-rr :r2 :r1)
		(vp-cpy-rr :r4 :r0)
	(endif)

	(exit 'pixmap :to_argb '(:r1))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :fill)
	;inputs
	;:r0 = pixmap object (ptr)
	;:r1 = color (argb)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r1-:r4

	(entry 'pixmap :fill '(:r0 :r1))

	(call 'pixmap :to_premul '(:r1) '(:r1))
	(vp-cpy-rr :r1 :r2)
	(vp-shl-cr 32 :r1)
	(vp-cpy-rr :r0 :r4)
	(vp-add-rr :r1 :r2)
	(assign '((:r0 pixmap_height) (:r0 pixmap_stride) (& :r0 pixmap_data)) '(:r1 :r3 :r0))
	(vp-mul-rr :r3 :r1)
	(call 'sys_mem :fill '(:r0 :r1 :r2))

	(exit 'pixmap :fill '(:r4))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :as_argb)
	;inputs
	;:r0 = pixmap object (ptr)
	;:r1 = source pixmap object (ptr)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r1-:r9

	(entry 'pixmap :as_argb '(:r0 :r1))

	(assign '((& :r0 pixmap_data) (& :r1 pixmap_data)) '(:r5 :r6))
	(assign '((:r0 pixmap_stride) (:r0 pixmap_height)) '(:r4 :r1))
	(vp-mul-rr :r1 :r6)
	(vp-add-rr :r5 :r6)
	(vp-xor-rr :r8 :r8)
	(vp-xor-rr :r9 :r9)
	(loop-start)
		(vp-cpy-ir-ui :r7 0 :r1)
		(vpif '(:r1 /= :r8))
			(vp-cpy-rr :r1 :r8)
			(call 'pixmap :to_argb '(:r1) '(:r9))
		(endif)
		(vp-cpy-ri-i :r9 :r5 0)
		(vp-add-cr +int_size :r5)
		(vp-add-cr +int_size :r7)
	(loop-until '(:r5 = :r6))

	(exit 'pixmap :as_argb '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :as_premul)
	;inputs
	;:r0 = pixmap object (ptr)
	;:r1 = source pixmap object (ptr)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r1-:r8

	(entry 'pixmap :as_premul '(:r0 :r1))

	(assign '((& :r0 pixmap_data) (& :r1 pixmap_data)) '(:r5 :r6))
	(assign '((:r0 pixmap_stride) (:r0 pixmap_height)) '(:r4 :r1))
	(vp-mul-rr :r1 :r4)
	(vp-add-rr :r5 :r4)
	(vp-xor-rr :r7 :r7)
	(vp-xor-rr :r8 :r8)
	(loop-start)
		(vp-cpy-ir-ui :r6 0 :r1)
		(vpif '(:r1 /= :r7))
			(vp-cpy-rr :r1 :r7)
			(call 'pixmap :to_premul '(:r1) '(:r8))
		(endif)
		(vp-cpy-ri-i :r8 :r5 0)
		(vp-add-cr +int_size :r5)
		(vp-add-cr +int_size :r6)
	(loop-until '(:r5 = :r4))

	(exit 'pixmap :as_premul '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :to_argb32)
	;inputs
	;:r1 = col (uint)
	;:r2 = pixel type (uint)
	;outputs
	;:r1 = col (uint)
	;trashes
	;:r1-:r8

	(vp-def (col pix rh rl gh gl bh bl) '(:r1 :r2 :r3 :r4 :r5 :r6 :r7 :r8))

	(entry 'pixmap :to_argb32 (list col pix))

	(switch)
	(vpcase (list pix '= 32))
		(vp-cpy-cr +argb_black pix)
		(vp-xor-rr pix col)
		(break)
	(vpcase (list pix '= 24))
		(vp-cpy-cr +argb_black pix)
		(vp-add-rr pix col)
		(break)
	(vpcase (list pix '= 16))
		(vp-cpy-rr col rh)
		(vp-cpy-rr col rl)
		(vp-cpy-rr col gh)
		(vp-cpy-rr col gl)
		(vp-cpy-rr col bh)
		(vp-cpy-rr col bl)
		(vp-and-cr 0b1111100000000000 rh)
		(vp-and-cr 0b1110000000000000 rl)
		(vp-and-cr 0b0000011111100000 gh)
		(vp-and-cr 0b0000011000000000 gl)
		(vp-and-cr 0b0000000000011111 bh)
		(vp-and-cr 0b0000000000011100 bl)
		(vp-shl-cr 8 rh)
		(vp-shl-cr 3 rl)
		(vp-shl-cr 5 gh)
		(vp-shr-cr 1 gl)
		(vp-shl-cr 3 bh)
		(vp-shr-cr 2 bl)
		(vp-cpy-cr +argb_black col)
		(vp-add-rr rh rl)
		(vp-add-rr gh gl)
		(vp-add-rr bh bl)
		(vp-add-rr rl gl)
		(vp-add-rr bl col)
		(vp-add-rr gl col)
		(break)
	(vpcase (list pix '= 15))
		(vp-cpy-rr col rh)
		(vp-cpy-rr col rl)
		(vp-cpy-rr col gh)
		(vp-cpy-rr col gl)
		(vp-cpy-rr col bh)
		(vp-cpy-rr col bl)
		(vp-and-cr 0b1000000000000000 col)
		(vp-and-cr 0b0111110000000000 rh)
		(vp-and-cr 0b0111000000000000 rl)
		(vp-and-cr 0b0000001111100000 gh)
		(vp-and-cr 0b0000001110000000 gl)
		(vp-and-cr 0b0000000000011111 bh)
		(vp-and-cr 0b0000000000011100 bl)
		(vp-mul-cr 130560 col)
		(vp-shl-cr 9 rh)
		(vp-shl-cr 4 rl)
		(vp-shl-cr 6 gh)
		(vp-shl-cr 1 gl)
		(vp-shl-cr 3 bh)
		(vp-shr-cr 2 bl)
		(vp-add-rr rh rl)
		(vp-add-rr gh gl)
		(vp-add-rr bh bl)
		(vp-add-rr rl gl)
		(vp-add-rr bl col)
		(vp-add-rr gl col)
		(break)
	(vpcase (list pix '= 12))
		(vp-cpy-rr col rh)
		(vp-cpy-rr col rl)
		(vp-cpy-rr col gh)
		(vp-cpy-rr col gl)
		(vp-cpy-rr col bh)
		(vp-cpy-rr col bl)
		(vp-and-cr 0b1111000000000000 col)
		(vp-and-cr 0b0000111100000000 rl)
		(vp-and-cr 0b0000111100000000 rh)
		(vp-and-cr 0b0000000011110000 gl)
		(vp-and-cr 0b0000000011110000 gh)
		(vp-and-cr 0b0000000000001111 bl)
		(vp-and-cr 0b0000000000001111 bh)
		(vp-mul-cr (/ 0xff000000 0b1111000000000000) col)
		(vp-shl-cr 12 rh)
		(vp-shl-cr 8 rl)
		(vp-shl-cr 8 gh)
		(vp-shl-cr 4 gl)
		(vp-shl-cr 4 bh)
		(vp-add-rr rh rl)
		(vp-add-rr gh gl)
		(vp-add-rr bh bl)
		(vp-add-rr rl gl)
		(vp-add-rr bl col)
		(vp-add-rr gl col)
		(break)
	(vpcase (list pix '= 8))
		(vp-cpy-rr col rl)
		(vp-cpy-rr col gl)
		(vp-cpy-rr col bl)
		(vp-shl-cr 16 rl)
		(vp-shl-cr 8 gl)
		(vp-cpy-cr +argb_black col)
		(vp-add-rr rl gl)
		(vp-add-rr bl col)
		(vp-add-rr gl col)
		(break)
	(default)
		(vpif (list col '= 0))
			(vp-cpy-cr +argb_black col)
		(else)
			(vp-cpy-cr +argb_white col)
		(endif)
	(endswitch)

	(exit 'pixmap :to_argb32 (list col))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :from_argb32)
	;inputs
	;:r1 = col (uint)
	;:r2 = pixel type (uint)
	;outputs
	;:r1 = col (uint)
	;trashes
	;:r1-:r5

	(vp-def (col pix r g b) '(:r1 :r2 :r3 :r4 :r5))

	(entry 'pixmap :from_argb32 (list col pix))

	(switch)
	(vpcase (list pix '= 32))
		(vp-cpy-cr +argb_black pix)
		(vp-xor-rr pix col)
		(break)
	(vpcase (list pix '= 24))
		(vp-and-cr 0xffffff col)
		(break)
	(vpcase (list pix '= 16))
		(vp-cpy-rr col g)
		(vp-cpy-rr col b)
		(vp-shr-cr 8 col)
		(vp-shr-cr 5 g)
		(vp-shr-cr 3 b)
		(vp-and-cr 0b1111100000000000 col)
		(vp-and-cr 0b0000011111100000 g)
		(vp-and-cr 0b0000000000011111 b)
		(vp-add-rr g col)
		(vp-add-rr b col)
		(break)
	(vpcase (list pix '= 15))
		(vp-cpy-rr col r)
		(vp-cpy-rr col g)
		(vp-cpy-rr col b)
		(vp-shr-cr 16 col)
		(vp-shr-cr 9 r)
		(vp-shr-cr 6 g)
		(vp-shr-cr 3 b)
		(vp-and-cr 0b1000000000000000 col)
		(vp-and-cr 0b0111110000000000 r)
		(vp-and-cr 0b0000001111100000 g)
		(vp-and-cr 0b0000000000011111 b)
		(vp-add-rr r g)
		(vp-add-rr b col)
		(vp-add-rr g col)
		(break)
	(vpcase (list pix '= 12))
		(vp-cpy-rr col r)
		(vp-cpy-rr col g)
		(vp-cpy-rr col b)
		(vp-shr-cr 16 col)
		(vp-shr-cr 12 r)
		(vp-shr-cr 8 g)
		(vp-shr-cr 4 b)
		(vp-and-cr 0b1111000000000000 col)
		(vp-and-cr 0b0000111100000000 r)
		(vp-and-cr 0b0000000011110000 g)
		(vp-and-cr 0b0000000000001111 b)
		(vp-add-rr r g)
		(vp-add-rr b col)
		(vp-add-rr g col)
		(break)
	(default)
		(vp-cpy-rr col g)
		(vp-cpy-rr col b)
		(vp-shr-cr 16 col)
		(vp-shr-cr 8 g)
		(vp-and-cr 0b11111111 col)
		(vp-and-cr 0b11111111 g)
		(vp-and-cr 0b11111111 b)
		(vp-mul-cr 19595 col)
		(vp-mul-cr 38469 g)
		(vp-mul-cr 7471 b)
		(vp-add-rr g col)
		(vp-add-rr b col)
		(vp-shr-cr 16 col)
		(breakif (list pix '= 8))
		(vp-shr-cr 7 col)
	(endswitch)

	(exit 'pixmap :from_argb32 (list col))
	(vp-ret)

(def-func-end)
