(include "lib/asm/func.inc")
(include "gui/region/class.inc")

(defmacro rect-overlap (a b c d e f g h i j k l m n o p)
	`(progn
		;jump to correct overlap code
		(gotoif '(:r11 >= :r7) 'rect_split1)
		(gotoif '(:r12 >= :r8) 'rect_split2)
		(gotoif '(:r9 >= :r13) 'rect_split4)
		(gotoif '(:r10 >= :r14) 'rect_xyx1)
		;x, y, x1, y1 inside
		~a
	(vp-label 'rect_split1)
		;jump to correct overlap code
		(gotoif '(:r12 >= :r8) 'rect_split3)
		(gotoif '(:r9 >= :r13) 'rect_split5)
		(gotoif '(:r10 >= :r14) 'rect_yx1)
		;y, x1, y1 inside
		~b
	(vp-label 'rect_split2)
		;jump to correct overlap code
		(gotoif '(:r9 >= :r13) 'rect_split6)
		(gotoif '(:r10 >= :r14) 'rect_xx1)
		;x, x1, y1 inside
		~c
	(vp-label 'rect_split3)
		;jump to correct overlap code
		(gotoif '(:r9 >= :r13) 'rect_split7)
		(gotoif '(:r10 >= :r14) 'rect_x1)
		;x1, y1 inside
		~d
	(vp-label 'rect_split4)
		;jump to correct overlap code
		(gotoif '(:r10 >= :r14) 'rect_xy)
		;x, y, y1 inside
		~e
	(vp-label 'rect_split5)
		;jump to correct overlap code
		(gotoif '(:r10 >= :r14) 'rect_y)
		;y, y1 inside
		~f
	(vp-label 'rect_split6)
		;jump to correct overlap code
		(gotoif '(:r10 >= :r14) 'rect_x)
		;x, y1 inside
		~g
	(vp-label 'rect_split7)
		;jump to correct overlap code
		(gotoif '(:r10 >= :r14) 'rect_encl)
		;y1 inside
		~h
	(vp-label 'rect_xyx1)
		;x, y, x1 inside
		~i
	(vp-label 'rect_encl)
		;region is enclosed
		~j
	(vp-label 'rect_x)
		;x inside
		~k
	(vp-label 'rect_y)
		;y inside
		~l
	(vp-label 'rect_xy)
		;x, y inside
		~m
	(vp-label 'rect_x1)
		;x1 inside
		~n
	(vp-label 'rect_xx1)
		;x, x1 inside
		~o
	(vp-label 'rect_yx1)
		;y, x1 inside
		~p))

(def-method 'region :copy_rect)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;:r2 = dest region listhead (ptr)
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;:r9 = x1 (pixels)
	;:r10 = y1 (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r4, :r11-:r14

	(entry 'region :copy_rect '(:r0 :r1 :r2 :r7 :r8 :r9 :r10))

	;check for any obvious errors in inputs
	(vpif '(:r9 > :r7) '(:r10 > :r8))
		;run through source region list
		(vp-cpy-rr :r2 :r3)
		(loop-flist :r1 0 :r4 :r4)
			;not in contact ?
			(assign '((:r4 rect_x) (:r4 rect_y) (:r4 rect_x1) (:r4 rect_y1)) '(:r11 :r12 :r13 :r14))
			(continueif '(:r11 >= :r9) '(:r12 >= :r10) '(:r7 >= :r13) '(:r8 >= :r14))

			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r3 0 :r1 :r2)

		(rect-overlap
			(;x, y, x1, y1 inside
			(assign '(:r7 :r8 :r9 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y, x1, y1 inside
			(assign '(:r11 :r8 :r9 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, x1, y1 inside
			(assign '(:r7 :r12 :r9 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x1, y1 inside
			(assign '(:r11 :r12 :r9 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, y, y1 inside
			(assign '(:r7 :r8 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y, y1 inside
			(assign '(:r11 :r8 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, y1 inside
			(assign '(:r7 :r12 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y1 inside
			(assign '(:r11 :r12 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, y, x1 inside
			(assign '(:r7 :r8 :r9 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;region is enclosed
			(assign '(:r11 :r12 :r13 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x inside
			(assign '(:r7 :r12 :r13 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y inside
			(assign '(:r11 :r8 :r13 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, y inside
			(assign '(:r7 :r8 :r13 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x1 inside
			(assign '(:r11 :r12 :r9 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, x1 inside
			(assign '(:r7 :r12 :r9 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y, x1 inside
			(assign '(:r11 :r8 :r9 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))))
		(loop-end)
	(endif)

	(exit 'region :copy_rect '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'region :cut_rect)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;:r2 = dest region listhead (ptr)
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;:r9 = x1 (pixels)
	;:r10 = y1 (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r6, :r11-:r14

	(entry 'region :cut_rect '(:r0 :r1 :r2 :r7 :r8 :r9 :r10))

	;check for any obvious errors in inputs
	(vpif '(:r9 > :r7) '(:r10 > :r8))
		;run through source region list
		(vp-cpy-rr :r2 :r4)
		(vp-cpy-rr :r1 :r5)
		(loop-flist :r1 0 :r3 :r6)
			;not in contact ?
			(assign '((:r3 rect_x) (:r3 rect_y) (:r3 rect_x1) (:r3 rect_y1)) '(:r11 :r12 :r13 :r14))
			(continueif '(:r11 >= :r9) '(:r12 >= :r10) '(:r7 >= :r13) '(:r8 >= :r14))

		(rect-overlap
			(;x, y, x1, y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r7 :r8 :r9 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;right part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r9 :r8 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;left part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r11 :r8 :r7 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y, x1, y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r11 :r8 :r9 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;right part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r9 :r8 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, x1, y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r7 :r12 :r9 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;right part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r9 :r12 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;left part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r11 :r12 :r7 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x1, y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r11 :r12 :r9 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;right part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r9 :r12 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, y, y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r7 :r8 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;left part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r11 :r8 :r7 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y, y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r11 :r8 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r7 :r12 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;left part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r11 :r12 :r7 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r11 :r12 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, y, x1 inside
			;left part
			(assign '(:r8 :r7) '((:r3 rect_y) (:r3 rect_x1)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r7 :r8 :r9 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;right part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r9 :r8 :r13 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;region is enclosed
			(vp-cpy-rr :r3 :r1)
			(ln-remove-fnode :r3 :r6)
			(ln-add-fnode :r4 0 :r1 :r6)
			(continue))

			(;x inside
			;left part
			(assign '(:r7) '((:r3 rect_x1)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r7 :r12 :r13 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y inside
			;top part
			(assign '(:r8) '((:r3 rect_y1)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r11 :r8 :r13 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, y inside
			;left part
			(assign '(:r8 :r7) '((:r3 rect_y) (:r3 rect_x1)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r7 :r8 :r13 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x1 inside
			;right part
			(assign '(:r9) '((:r3 rect_x)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r11 :r12 :r9 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, x1 inside
			;right part
			(assign '(:r9) '((:r3 rect_x)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r7 :r12 :r9 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;left part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r11 :r12 :r7 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y, x1 inside
			;right part
			(assign '(:r9 :r8) '((:r3 rect_x) (:r3 rect_y)))
			;cut part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r6)
			(assign '(:r11 :r8 :r9 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r5 0 :r1 :r6)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))))
		(loop-end)
	(endif)

	(exit 'region :cut_rect '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'region :paste_rect)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = dest region listhead (ptr)
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;:r9 = x1 (pixels)
	;:r10 = y1 (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r14

	(entry 'region :paste_rect '(:r0 :r1 :r7 :r8 :r9 :r10))

	;check for any obvious errors in inputs
	(vpif '(:r9 > :r7) '(:r10 > :r8))
		;run through source region list
		(vp-cpy-rr :r1 :r4)
		(loop-flist :r1 0 :r6 :r5)
			;not in contact ?
			(assign '((:r6 rect_x) (:r6 rect_y) (:r6 rect_x1) (:r6 rect_y1)) '(:r11 :r12 :r13 :r14))
			(continueif '(:r11 >= :r9) '(:r12 >= :r10) '(:r7 >= :r13) '(:r8 >= :r14))

		(rect-overlap
			(;x, y, x1, y1 inside
			(vp-ret))

			(;y, x1, y1 inside
			(vp-cpy-rr :r11 :r9)
			(continue))

			(;x, x1, y1 inside
			(vp-cpy-rr :r12 :r10)
			(continue))

			(;x1, y1 inside
			;bottom part
			(assign '(:r10) '((:r6 rect_y)))
			;right part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r9 :r12 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, y, y1 inside
			(vp-cpy-rr :r13 :r7)
			(continue))

			(;y, y1 inside
			;bottom part
			(assign '(:r10) '((:r6 rect_y)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, y1 inside
			;bottom part
			(assign '(:r10) '((:r6 rect_y)))
			;left part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r7 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y1 inside
			;bottom part
			(assign '(:r10) '((:r6 rect_y)))
			(continue))

			(;x, y, x1 inside
			(vp-cpy-rr :r14 :r8)
			(continue))

			(;region is enclosed
			(vp-cpy-rr :r6 :r1)
			(ln-remove-fnode :r6 :r5)
			(hp-freecell :r0 :r1 :r2)
			(continue))

			(;x inside
			;left part
			(assign '(:r7) '((:r6 rect_x1)))
			(continue))

			(;y inside
			;top part
			(assign '(:r8) '((:r6 rect_y1)))
			(continue))

			(;x, y inside
			;left part
			(assign '(:r8 :r7) '((:r6 rect_y) (:r6 rect_x1)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x1 inside
			;right part
			(assign '(:r9) '((:r6 rect_x)))
			(continue))

			(;x, x1 inside
			;right part
			(assign '(:r9) '((:r6 rect_x)))
			;left part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r7 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y, x1 inside
			;right part
			(assign '(:r9 :r8) '((:r6 rect_x) (:r6 rect_y)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))))
		(loop-end)

		;create new region ?
		(vpif '(:r7 /= :r9) '(:r8 /= :r10))
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (breakif '(:r1 = 0))

			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r7 :r8 :r9 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
		(endif)
	(endif)

	(exit 'region :paste_rect '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'region :remove_rect)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;:r9 = x1 (pixels)
	;:r10 = y1 (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r5, :r11-:r14

	(entry 'region :remove_rect '(:r0 :r1 :r7 :r8 :r9 :r10))

	;check for any obvious errors in inputs
	(vpif '(:r9 > :r7) '(:r10 > :r8))
		;run through source region list
		(vp-cpy-rr :r1 :r4)
		(loop-flist :r1 0 :r3 :r5)
			;not in contact ?
			(assign '((:r3 rect_x) (:r3 rect_y) (:r3 rect_x1) (:r3 rect_y1)) '(:r11 :r12 :r13 :r14))
			(continueif '(:r11 >= :r9) '(:r12 >= :r10) '(:r7 >= :r13) '(:r8 >= :r14))

		(rect-overlap
			(;x, y, x1, y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;right part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r9 :r8 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;left part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r8 :r7 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y, x1, y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;right part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r9 :r8 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, x1, y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;right part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r9 :r12 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;left part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r7 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x1, y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;right part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r9 :r12 :r13 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, y, y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;left part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r8 :r7 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y, y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x, y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			;left part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r7 :r10) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y1 inside
			;bottom part
			(assign '(:r10) '((:r3 rect_y)))
			(continue))

			(;x, y, x1 inside
			;left part
			(assign '(:r8 :r7) '((:r3 rect_y) (:r3 rect_x1)))
			;right part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r9 :r8 :r13 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;region is enclosed
			(vp-cpy-rr :r3 :r1)
			(ln-remove-fnode :r3 :r5)
			(hp-freecell :r0 :r1 :r2)
			(continue))

			(;x inside
			;left part
			(assign '(:r7) '((:r3 rect_x1)))
			(continue))

			(;y inside
			;top part
			(assign '(:r8) '((:r3 rect_y1)))
			(continue))

			(;x, y inside
			;left part
			(assign '(:r8 :r7) '((:r3 rect_y) (:r3 rect_x1)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;x1 inside
			;right part
			(assign '(:r9) '((:r3 rect_x)))
			(continue))

			(;x, x1 inside
			;right part
			(assign '(:r9) '((:r3 rect_x)))
			;left part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r7 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
			(continue))

			(;y, x1 inside
			;right part
			(assign '(:r9 :r8) '((:r3 rect_x) (:r3 rect_y)))
			;top part
			(call 'sys_heap :alloc '(:r0) '(:r0 :r1))
			; (continueif '(:r1 = 0))
			(ln-add-fnode :r4 0 :r1 :r2)
			(assign '(:r11 :r12 :r13 :r8) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))))
		(loop-end)
	(endif)

	(exit 'region :remove_rect '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'region :remove_region)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;:r2 = dest region listhead (ptr)
	;:r7 = x translation (pixels)
	;:r8 = y translation (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr dlist)
		(int dx dy))

	;save inputs
	(vp-alloc local_size)
	(entry 'region :remove_region '(:r0 :r1 (:rsp local_dlist) (:rsp local_dx) (:rsp local_dy)))

	;run through source region list
	(loop-flist :r1 0 :r6 :r6)
		(assign '((:rsp local_dx) (:rsp local_dy) (:r6 rect_x) (:r6 rect_y) (:r6 rect_x1) (:r6 rect_y1))
			'(:r11 :r12 :r7 :r8 :r9 :r10))
		(vp-vec vp-add-rr '(:r11 :r12 :r11 :r12) '(:r7 :r8 :r9 :r10))
		(call 'region :remove_rect '(:r0 (:rsp local_dlist) :r7 :r8 :r9 :r10))
	(loop-end)

	(exit 'region :remove_region '(:r0))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'region :copy_region)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;:r2 = dest region listhead (ptr)
	;:r3 = copy region listhead (ptr)
	;:r7 = x translation (pixels)
	;:r8 = y translation (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr slist)
		(int dx dy))

	;save inputs
	(vp-alloc local_size)
	(entry 'region :copy_region '(:r0 (:rsp local_slist) :r6 :r3 (:rsp local_dx) (:rsp local_dy)))

	;run through copy region list
	(loop-flist :r3 0 :r5 :r5)
		(assign '((:rsp local_dx) (:rsp local_dy) (:r5 rect_x) (:r5 rect_y) (:r5 rect_x1) (:r5 rect_y1))
			'(:r11 :r12 :r7 :r8 :r9 :r10))
		(vp-vec vp-add-rr '(:r11 :r12 :r11 :r12) '(:r7 :r8 :r9 :r10))
		(call 'region :copy_rect '(:r0 (:rsp local_slist) :r6 :r7 :r8 :r9 :r10))
	(loop-end)

	(exit 'region :copy_region '(:r0))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'region :paste_region)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;:r2 = dest region listhead (ptr)
	;:r7 = x translation (pixels)
	;:r8 = y translation (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr node dlist)
		(int dx dy))

	;save inputs
	(vp-alloc local_size)
	(entry 'region :paste_region '(:r0 :r1 (:rsp local_dlist) (:rsp local_dx) (:rsp local_dy)))

	;run through source region list
	(loop-flist :r1 0 :r1 :r1)
		(assign '(:r1 (:rsp local_dx) (:rsp local_dy) (:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1))
			'((:rsp local_node) :r11 :r12 :r7 :r8 :r9 :r10))
		(vp-vec vp-add-rr '(:r11 :r12 :r11 :r12) '(:r7 :r8 :r9 :r10))
		(call 'region :paste_rect '(:r0 (:rsp local_dlist) :r7 :r8 :r9 :r10))
		(assign '((:rsp local_node)) '(:r1))
	(loop-end)

	(exit 'region :paste_region '(:r0))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'region :clip_rect)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;:r9 = x1 (pixels)
	;:r10 = y1 (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r3, :r11-:r14

	(entry 'region :clip_rect '(:r0 :r1 :r7 :r8 :r9 :r10))

	;check for any obvious errors in inputs
	(vpif '(:r9 > :r7) '(:r10 > :r8))
		;run through source region list
		(loop-flist :r1 0 :r1 :r3 'node_loop)
			(assign '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)) '(:r11 :r12 :r13 :r14))
			(vpif '(:r11 < :r9) '(:r12 < :r10) '(:r13 > :r7) '(:r14 > :r8))
				;clip region
				(vpif '(:r11 < :r7))
					(assign '(:r7) '((:r1 rect_x)))
				(endif)
				(vpif '(:r12 < :r8))
					(assign '(:r8) '((:r1 rect_y)))
				(endif)
				(vpif '(:r13 > :r9))
					(assign '(:r9) '((:r1 rect_x1)))
				(endif)
				(vpif '(:r14 > :r10))
					(assign '(:r10) '((:r1 rect_y1)))
				(endif)
				(continue 'node_loop)
			(endif)

			;region is outside
			(vp-cpy-rr :r1 :r2)
			(ln-remove-fnode :r1 :r3)
			(hp-freecell :r0 :r2 :r3)
		(loop-end)
	(endif)

	(exit 'region :clip_rect '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'region :bounds)
	;inputs
	;:r1 = region listhead (ptr)
	;outputs
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;:r9 = x1 (pixels)
	;:r10 = y1 (pixels)
	;trashes
	;:r1, :r7-:r14

	;is empty ?
	(entry 'region :bounds '(:r1))

	(assign '((:r1 ln_fnode_next)) '(:r1))
	(vpif '(:r1 = 0))
		(vp-vec vp-cpy-rr '(:r1 :r1 :r1 :r1) '(:r7 :r8 :r9 :r10))
	(else)
		;first rect
		(assign '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)) '(:r7 :r8 :r9 :r10))
		;run through region list
		(loop-flist :r1 0 :r1 :r1)
			(assign '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)) '(:r11 :r12 :r13 :r14))
			(vp-vec vp-min '(:r11 :r12) '(:r7 :r8))
			(vp-vec vp-max '(:r13 :r14) '(:r9 :r10))
		(loop-end)
	(endif)

	(exit 'region :bounds '(:r7 :r8 :r9 :r10))
	(vp-ret)

(def-func-end)

(def-method 'region :translate)
	;inputs
	;:r1 = region listhead (ptr)
	;:r7 = x translation (pixels)
	;:r8 = y translation (pixels)
	;trashes
	;:r1, :r11-:r14

	(entry 'region :translate '(:r1 :r7 :r8))

	;run through source region list
	(loop-flist :r1 0 :r1 :r1)
		(assign '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)) '(:r11 :r12 :r13 :r14))
		(vp-vec vp-add-rr '(:r7 :r8 :r7 :r8) '(:r11 :r12 :r13 :r14))
		(assign '(:r11 :r12 :r13 :r14) '((:r1 rect_x) (:r1 rect_y) (:r1 rect_x1) (:r1 rect_y1)))
	(loop-end)
	(vp-ret)

(def-func-end)

(def-method 'region :free)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r3

	;run through source region list
	(entry 'region :free '(:r0 :r1))

	(loop-flist :r1 0 :r1 :r2)
		(vp-cpy-rr :r1 :r3)
		(ln-remove-fnode :r1 :r2)
		(hp-freecell :r0 :r3 :r2)
	(loop-end)

	(exit 'region :free '(:r0))
	(vp-ret)

(def-func-end)
