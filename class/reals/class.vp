(include "lib/asm/func.inc")
(include "sys/math/class.inc")
(include "./class.inc")
(include "././sym/class.inc")
(include "././list/class.inc")

(gen-create 'reals)
(gen-vtable 'reals)
(gen-type 'reals)

(def-method 'reals :add)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source1 reals object, can be same (ptr)
	;:r2 = source2 reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r14

	(vp-def (e0 e1 dst src1 src2 dst1 src_end) (method-input 'sys_math :r_add))

	(entry 'reals :add `(,dst ,src1 ,src2))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,src2 ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1) (call 'sys_math :r_add `(,e0 ,e1) '(r)) r))

	(exit 'reals :add `(,dst -1))
	(vp-ret)

(def-func-end)

(def-method 'reals :sub)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source1 reals object, can be same (ptr)
	;:r2 = source2 reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r14

	(vp-def (e0 e1 dst src1 src2 dst1 src_end) (method-input 'sys_math :r_sub))

	(entry 'reals :sub `(,dst ,src1 ,src2))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,src2 ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1) (call 'sys_math :r_sub `(,e0 ,e1) '(r)) r))

	(exit 'reals :sub `(,dst -1))
	(vp-ret)

(def-func-end)

(def-method 'reals :min)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source1 reals object, can be same (ptr)
	;:r2 = source2 reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r14

	(vp-def (e0 e1 dst src1 src2 dst1 src_end t0 t1) (method-input 'sys_math :r_sub))

	(entry 'reals :min `(,dst ,src1 ,src2))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,src2 ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1)
			(assign `(,e0 ,e1) `(,t0 ,t1))
			(call 'sys_math :r_sub `(,e0 ,e1) '(r))
			(vpif `(,r < 0))
				(assign `(,t0) `(,t1))
			(endif)
			t1))

	(exit 'reals :min `(,dst -1))
	(vp-ret)

(def-func-end)

(def-method 'reals :max)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source1 reals object, can be same (ptr)
	;:r2 = source2 reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r14

	(vp-def (e0 e1 dst src1 src2 dst1 src_end t0 t1) (method-input 'sys_math :r_sub))

	(entry 'reals :max `(,dst ,src1 ,src2))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,src2 ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1)
			(assign `(,e0 ,e1) `(,t0 ,t1))
			(call 'sys_math :r_sub `(,e0 ,e1) '(r))
			(vpif `(,r > 0))
				(assign `(,t0) `(,t1))
			(endif)
			t1))

	(exit 'reals :max `(,dst -1))
	(vp-ret)

(def-func-end)

(def-method 'reals :mul)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source1 reals object, can be same (ptr)
	;:r2 = source2 reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r14

	(vp-def (e0 e1 dst src1 src2 dst1 src_end) (method-input 'sys_math :r_mul))

	(entry 'reals :mul `(,dst ,src1 ,src2))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,src2 ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1) (call 'sys_math :r_mul `(,e0 ,e1) '(r)) r))

	(exit 'reals :mul `(,dst -1))
	(vp-ret)

(def-func-end)

(def-method 'reals :div)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source1 reals object, can be same (ptr)
	;:r2 = source2 reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r14

	(vp-def (e0 e1 dst src1 src2 dst1 src_end) (method-input 'sys_math :r_div))

	(entry 'reals :div `(,dst ,src1 ,src2))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,src2 ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1)
			(errorif `(,e1 = 0) 'error)
			(call 'sys_math :r_div `(,e0 ,e1) '(r)) r))

	(exit 'reals :div `(,dst -1))
	(vp-ret)
(vp-label 'error)
	(exit 'reals :div `(,dst 0))
	(vp-ret)

(def-func-end)

(def-method 'reals :mod)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source1 reals object, can be same (ptr)
	;:r2 = source2 reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r14

	(vp-def (e0 e1 dst src1 src2 dst1 src_end) (method-input 'sys_math :r_mod))

	(entry 'reals :mod `(,dst ,src1 ,src2))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,src2 ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1)
			(errorif `(,e1 = 0) 'error)
			(call 'sys_math :r_mod `(,e0 ,e1) '(r)) r))

	(exit 'reals :mod `(,dst -1))
	(vp-ret)
(vp-label 'error)
	(exit 'reals :mod `(,dst 0))
	(vp-ret)

(def-func-end)

(def-method 'reals :frac)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (e0 dst src1 dst1 src_end) (method-input 'sys_math :r_frac))

	(entry 'reals :frac `(,dst ,src1))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,dst)) `(,src1 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1) `(,e0) src_end dst1
		(lambda (e0) (call 'sys_math :r_frac `(,e0) '(r)) r))

	(exit 'reals :frac `(,dst))
	(vp-ret)

(def-func-end)

(def-method 'reals :floor)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (e0 dst src1 dst1 src_end) (method-input 'sys_math :r_floor))

	(entry 'reals :floor `(,dst ,src1))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,dst)) `(,src1 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1) `(,e0) src_end dst1
		(lambda (e0) (call 'sys_math :r_floor `(,e0) '(r)) r))

	(exit 'reals :floor `(,dst))
	(vp-ret)

(def-func-end)

(def-method 'reals :abs)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (e0 dst src1 dst1 src_end) `(,(method-output 'sys_math :r_sub 0)))

	(entry 'reals :abs `(,dst ,src1))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,dst)) `(,src1 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1) `(,e0) src_end dst1
		(lambda (e0)
			(vpif `(,e0 < 0))
				(call 'sys_math :r_sub `(0 ,e0) `(,e0))
			(endif)
			e0))

	(exit 'reals :abs `(,dst))
	(vp-ret)

(def-func-end)

(def-method 'reals :scale)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = source reals object, can be same (ptr)
	;:r2 = scale (real)
	;outputs
	;:r0 = reals object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (e0 dst src1 scale dst1 src_end) `(,(method-input 'sys_math :r_mul 0)))

	(entry 'reals :scale `(,dst ,src1 ,scale))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,dst)) `(,src1 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1) `(,e0) src_end dst1
		(lambda (e0) (call 'sys_math :r_mul `(,e0 ,scale) '(r)) r))

	(exit 'reals :scale `(,dst))
	(vp-ret)

(def-func-end)

(def-method 'reals :sum)
	;inputs
	;:r0 = reals object (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;:r1 = sum (real)
	;trashes
	;:r1-:r14

	(vp-def (sum this src1 src_end) `(,(method-input 'sys_math :r_add 0)))

	(entry 'reals :sum `(,this))

	(class/array/get_both this src1 src_end)
	(vp-xor-rr sum sum)
	(vpif `(,src1 /= ,src_end))
		(assign `((,src1 0)) `(,sum))
		(vp-add-cr +long_size src1)
		(loop-while `(,src1 /= ,src_end))
			(call 'sys_math :r_add `(,sum (,src1 0)) `(,sum))
			(vp-add-cr +long_size src1)
		(loop-end)
	(endif)

	(exit 'reals :sum `(,this ,sum))
	(vp-ret)

(def-func-end)

(def-method 'reals :dot)
	;inputs
	;:r0 = reals object (ptr)
	;:r1 = reals object, can be same (ptr)
	;outputs
	;:r0 = reals object (ptr)
	;:r1 = dot product (real)
	;trashes
	;:r1-:r14

	(vp-def (val1 val2 this sum src2 src1 src_end) '(:r13 :r14))

	(entry 'reals :dot `(,this :r1))

	(class/array/get_both this src1 src_end)
	(assign '((:r1 array_begin) 0) `(,src2 ,sum))
	(vpif `(,src1 /= ,src_end))
		(assign `((,src1 0) (,src2 0)) `(,val1 ,val2))
		(vp-add-cr +long_size src1)
		(vp-add-cr +long_size src2)
		(call 'sys_math :r_mul `(,val1 ,val2) `(,sum))
		(loop-while `(,src1 /= ,src_end))
			(assign `((,src1 0) (,src2 0)) `(,val1 ,val2))
			(vp-add-cr +long_size src1)
			(vp-add-cr +long_size src2)
			(call 'sys_math :r_mul `(,val1 ,val2) `(,val1))
			(call 'sys_math :r_add `(,val1 ,sum) `(,sum))
		(loop-end)
	(endif)

	(exit 'reals :dot `(,this ,sum))
	(vp-ret)

(def-func-end)
