(include "lib/asm/func.inc")
(include "././func/class.inc")
(include "./class.inc")

(def-method 'lisp :repl_apply)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;:r2 = func object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'lisp :repl_apply '(:r0 :r1 :r2))

	(assign `((:r2 obj_vtable) (@ ,(f-path 'func :vtable))) '(:r3 :r4))
	(vpif '(:r3 = :r4))
		;built in or compiled function
		(assign '((:r2 num_value)) '(:r2))
		(vp-and-cr (neg +ptr_size) :r2)
		(vp-jmp-r :r2)
	(endif)

(errorcase
	(f-bind 'list :vtable :r4)
	(gotoif '(:r3 /= :r4) 'error2)
	(assign '((:r2 array_length)) '(:r3))
	(gotoif '(:r3 < 2) 'error1))

	(class/array/get_both :r2 :r3 :r4)

(errorcase
	(array-get-args :r3 '(:r5))
	(switch)
	(assign '((:r0 lisp_func_lambda)) '(:r6))
	(breakif '(:r5 = :r6))
	(assign '((:r0 lisp_func_macro)) '(:r6))
	(breakif '(:r5 = :r6))
	(assign '((:r0 lisp_sym_lambda)) '(:r6))
	(breakif '(:r5 = :r6))
	(assign '((:r0 lisp_sym_macro)) '(:r6))
	(gotoif '(:r5 /= :r6) 'error2)
	(endswitch))

	(vp-push :r1 :r3 :r4)
	(call 'lisp :env_push '(:r0) '(:r0 _))
	(assign `((:rsp ,+ptr_size)) '(:r1))
	(call 'lisp :env_bind `(:r0 (:r1 ,+ptr_size) (:rsp ,(* 2 +ptr_size))) '(:r0 :r1))
	(vp-pop :r4 :r2 :r3)
	(call 'lisp :repl_progn `(:r0 :r1 (& :r2 ,(* 2 +ptr_size)) :r3) '(:r0 :r1))
	(vp-push :r1)
	(call 'lisp :env_pop '(:r0) '(:r0 _))
	(vp-pop :r1)

	(exit 'lisp :repl_apply '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error '(:r0 "(lambda ([arg ...]) body)" +error_msg_wrong_num_of_args :r2))
(vp-label 'error2)
	(jump 'lisp :repl_error '(:r0 "(lambda ([arg ...]) body)" +error_msg_not_a_function :r2)))

(def-func-end)
