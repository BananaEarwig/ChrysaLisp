(include "lib/asm/func.inc")
(include "././stream/class.inc")
(include "./class.inc")
(include "././str/class.inc")
(include "lib/consts/chars.inc")

(def-method 'lisp :read_list)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = stream object (ptr)
	;:r2 = next char (uint)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = list object (ptr)
	;:r2 = next char (uint)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this stream list ast)
		(int char))

	(vp-def (this stream c v1 v2))

	(push-scope)
	(entry 'lisp :read_list {this, stream, char})

	;skip initial "("
	(call 'lisp :read_char {this, stream, char} {_, char})

	(call 'list :create :nil {list})
	(loop-start)
		;skip white space/comments
		(assign {char} `(,c))
		(loop-start)
			(assign {this} `(,this))
			(loop-while `(,c <= +char_space) `(,c /= -1))
				(assign {stream} `(,stream))
				(call 'lisp :read_char `(,this ,stream ,c) `(,this ,c))
			(loop-end)
			(breakif `(,c /= +char_semi))
			(call 'stream :skip_not {stream, +char_lf} '(s))
			(call 'stream :read_char `(,s) `(_ ,c))
		(loop-end)
		(breakif `(,c = -1) `(,c = +char_rrb))

		(assign {this, stream} `(,this ,stream))
		(call 'lisp :read `(,this ,stream ,c) {_, ast, char})
		(errorif (cat {ast->obj_vtable = @} (f-path 'error :vtable)) 'error)
		(call 'list :push_back {list, ast})
	(loop-end)

	;skip trailing ")"
	(call 'stream :read_char {stream} {_, char})

(vp-label 'funcexit)
	(exit 'lisp :read_list {this, list, char})
	(return)

(errorcase
(vp-label 'error)
	(call 'obj :deref {list})
	(assign {ast} {list})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)
