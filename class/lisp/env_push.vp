(include "lib/asm/func.inc")
(include "class/hmap/class.inc")
(include "class/lisp/class.inc")

(def-method 'lisp :env_push)
	;inputs
	;:r0 = lisp object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = hmap object (ptr)
	;trashes
	;:r1-:r14

	(entry 'lisp :env_push '(:r0))

	(vp-push :r0)
	(assign '((:r0 lisp_environment)) '(:r0))
	(call 'hmap :create '((:r0 hset_key_callback) 1) '(:r0))
	(assign '((:rsp 0)) '(:r1))
	(call 'hmap :set_parent '(:r0 (:r1 lisp_environment)) '(:r1))
	(vp-pop :r0)
	(assign '(:r1) '((:r0 lisp_environment)))

	(exit 'lisp :env_push '(:r0 :r1))
	(vp-ret)

(def-func-end)

(def-method 'lisp :lisp_env_push)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'lisp :lisp_env_push '(:r0 :r1))

	(assign '((:r1 array_length)) '(:r2))
	(errorif '(:r2 > 1) 'error)
	(vpif '(:r2 = 0))
		(call 'lisp :env_push '(:r0) '(:r0 :r1))
		(class/obj/ref :r1 :r2)
	(else)
		(array-bind-args :r1 '(:r13))
	(errorcase
		(assign '((:r13 obj_vtable)) '(:r3))
		(f-bind 'hmap :vtable :r4)
		(gotoif '(:r4 /= :r3) 'error))
		(vp-push :r0)
		(call 'hmap :create '((:r13 hset_key_callback) 1) '(:r0))
		(call 'hmap :set_parent '(:r0 :r13) '(:r1))
		(class/obj/ref :r13 :r2)
		(vp-pop :r0)
	(endif)

	(exit 'lisp :lisp_env_push '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(env-push [env])" +error_msg_wrong_types :r1)))

(def-func-end)
