(include "lib/asm/func.inc")
(include "sys/mail/class.inc")
(include "sys/task/class.inc")
(include "././fstream/class.inc")
(include "././sstream/class.inc")
(include "./class.inc")
(include "././sym/class.inc")
(include "gui/view/class.inc")
(include "lib/consts/chars.inc")
(include "sys/statics/class.inc")

(def-func 'class/lisp/run :nil 8192)
	;lisp run loop task
	;inputs
	;msg of lisp filename

	(def-vars
		(ptr script lisp args obj))

	;init app vars
	(push-scope)

	;get param string
	(call 'sys_mail :mymail :nil {script, _})
	(call 'sys_mail :free_obj {script} {script, _, _})

	;string output stream
	(call 'str :create_from_buffer {0, str_gap} {obj})
	(call 'sstream :create {obj} {obj})

	;create lisp class
	(call 'lisp :create {script, obj, obj, obj} {lisp})
	(call 'obj :deref {obj})
	(vpif {lisp})
		;do we have a main ?
		(call 'view :get_prop {lisp->lisp_environment, static_sym_main} {_, obj})
		(breakifnot {obj})
		(call 'list :create :nil {args})
		(call 'lisp :repl_apply {lisp, args, obj} {_, obj})
		(vpif {obj->obj_vtable = @class/error/vtable})
			;error in main
			(call 'obj :print {obj, lisp->lisp_stderr})
			(call 'stream :write_char {lisp->lisp_stderr, +char_lf})
			(call 'stream :flush {lisp->lisp_stderr})
		(endif)
		(call 'obj :deref {args})
		(call 'obj :deref {obj})
		(call 'lisp :deref {lisp})
	(endif)
	(call 'str :deref {script})

	;flush interned symbols, nums and mem blocks
	(fn-bind 'sys/statics/statics :r0)
	(call 'hset :flush '((:r0 statics_sym_intern)))
	(fn-bind 'sys/statics/statics :r0)
	(call 'hset :flush '((:r0 statics_num_intern)))
	(call 'sys_mem :collect)

	(pop-scope)
	(return)

(def-func-end)
