(include "lib/asm/func.inc")
(include "class/nums/class.inc")

(gen-create 'nums)
(gen-vtable 'nums)

(def-method 'nums :add)
	;inputs
	;:r0 = nums object (ptr)
	;:r1 = source1 nums object, can be same (ptr)
	;:r2 = source2 nums object, can be same (ptr)
	;outputs
	;:r0 = nums object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r6

	(vp-def (dst src1 src2 dst1 src_end e0 e1))

	(entry 'nums :add `(,dst ,src1 ,src2))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,src2 ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1) (vp-add-rr e1 e0) e0))

	(exit 'nums :add `(,dst -1))
	(vp-ret)

(def-func-end)

(def-method 'nums :sub)
	;inputs
	;:r0 = nums object (ptr)
	;:r1 = source1 nums object, can be same (ptr)
	;:r2 = source2 nums object, can be same (ptr)
	;outputs
	;:r0 = nums object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r6

	(vp-def (dst src1 src2 dst1 src_end e0 e1))

	(entry 'nums :sub `(,dst ,src1 ,src2))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,src2 ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1) (vp-sub-rr e1 e0) e0))

	(exit 'nums :sub `(,dst -1))
	(vp-ret)

(def-func-end)

(def-method 'nums :min)
	;inputs
	;:r0 = nums object (ptr)
	;:r1 = source1 nums object, can be same (ptr)
	;:r2 = source2 nums object, can be same (ptr)
	;outputs
	;:r0 = nums object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r6

	(vp-def (dst src1 src2 dst1 src_end e0 e1))

	(entry 'nums :min `(,dst ,src1 ,src2))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,src2 ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1) (vp-min-rr e1 e0) e0))

	(exit 'nums :min `(,dst -1))
	(vp-ret)

(def-func-end)

(def-method 'nums :max)
	;inputs
	;:r0 = nums object (ptr)
	;:r1 = source1 nums object, can be same (ptr)
	;:r2 = source2 nums object, can be same (ptr)
	;outputs
	;:r0 = nums object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r6

	(vp-def (dst src1 src2 dst1 src_end e0 e1))

	(entry 'nums :max `(,dst ,src1 ,src2))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,src2 ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1) (vp-max-rr e1 e0) e0))

	(exit 'nums :max `(,dst -1))
	(vp-ret)

(def-func-end)

(def-method 'nums :mul)
	;inputs
	;:r0 = nums object (ptr)
	;:r1 = source1 nums object, can be same (ptr)
	;:r2 = source2 nums object, can be same (ptr)
	;outputs
	;:r0 = nums object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r6

	(vp-def (dst src1 src2 dst1 src_end e0 e1))

	(entry 'nums :mul `(,dst ,src1 ,src2))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,src2 ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1) (vp-mul-rr e1 e0) e0))

	(exit 'nums :mul `(,dst -1))
	(vp-ret)

(def-func-end)

(def-method 'nums :div)
	;inputs
	;:r0 = nums object (ptr)
	;:r1 = source1 nums object, can be same (ptr)
	;:r2 = source2 nums object, can be same (ptr)
	;outputs
	;:r0 = nums object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r7

	(vp-def (e0 e1 high src1 src2 dst1 src_end dst))

	(entry 'nums :div `(,dst ,e1 ,high))

	(assign `((,e1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,e1 ,high ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1)
			(errorif `(,e1 = 0) 'error)
			(vp-ext-rr e0 high)
			(vp-div-rrr e1 high e0)
			e0))

	(exit 'nums :div `(,dst -1))
	(vp-ret)
(vp-label 'error)
	(exit 'nums :div `(,dst 0))
	(vp-ret)

(def-func-end)

(def-method 'nums :mod)
	;inputs
	;:r0 = nums object (ptr)
	;:r1 = source1 nums object, can be same (ptr)
	;:r2 = source2 nums object, can be same (ptr)
	;outputs
	;:r0 = nums object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r7

	(vp-def (e0 e1 high src1 src2 dst1 src_end dst))

	(entry 'nums :mod `(,dst ,e1 ,high))

	(assign `((,e1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,e1 ,high ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1)
			(errorif `(,e1 = 0) 'error)
			(vp-ext-rr e0 high)
			(vp-div-rrr e1 high e0)
			high))

	(exit 'nums :mod `(,dst -1))
	(vp-ret)
(vp-label 'error)
	(exit 'nums :mod `(,dst 0))
	(vp-ret)

(def-func-end)

(def-method 'nums :abs)
	;inputs
	;:r0 = nums object (ptr)
	;:r1 = source nums object, can be same (ptr)
	;outputs
	;:r0 = nums object (ptr)
	;trashes
	;:r1-:r4

	(vp-def (dst src1 dst1 src_end e0))

	(entry 'nums :abs `(,dst ,src1))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,dst)) `(,src1 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1) `(,e0) src_end dst1
		(lambda (e0) (vp-abs-rr e0 e0) e0))

	(exit 'nums :abs `(,dst))
	(vp-ret)

(def-func-end)

(def-method 'nums :sum)
	;inputs
	;:r0 = nums object (ptr)
	;outputs
	;:r0 = nums object (ptr)
	;:r1 = sum (long)
	;trashes
	;:r1-:r4

	(vp-def (dst sum dst1 dst_end e0))

	(entry 'nums :sum `(,dst))

	(assign `((,dst array_length)) `(,dst_end))
	(assign (map (# `(,%0 array_begin)) `(,dst)) `(,dst1))
	(vp-xor-rr sum sum)
	(vp-shl-cr (log2 +ptr_size) dst_end)
	(vp-add-rr dst1 dst_end)
	(vec-loop-until `(,dst1) `(,e0) dst_end :nil
		(lambda (e0) (vp-add-rr e0 sum)))

	(exit 'nums :sum `(,dst ,sum))
	(vp-ret)

(def-func-end)

(def-method 'nums :scale)
	;inputs
	;:r0 = nums object (ptr)
	;:r1 = source nums object, can be same (ptr)
	;:r2 = scale (int)
	;outputs
	;:r0 = nums object (ptr)
	;trashes
	;:r1-:r5

	(vp-def (dst src1 scale dst1 src_end e0))

	(entry 'nums :scale `(,dst ,src1 ,scale))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,dst)) `(,src1 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1) `(,e0) src_end dst1
		(lambda (e0) (vp-mul-rr scale e0) e0))

	(exit 'nums :scale `(,dst))
	(vp-ret)

(def-func-end)

(def-method 'nums :dot)
	;inputs
	;:r0 = nums object (ptr)
	;:r1 = nums object, can be same (ptr)
	;outputs
	;:r0 = nums object (ptr)
	;:r1 = dot product (long)
	;trashes
	;:r1-:r6

	(vp-def (src dot src1 src2 src_end e0 e1))

	(entry 'nums :dot `(,src1 ,dot))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,dot ,src)) `(,src1 ,src2))
	(vp-xor-rr dot dot)
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end :nil
		(lambda (e0 e1) (vp-mul-rr e0 e1) (vp-add-rr e1 dot)))

	(exit 'nums :dot `(,src ,dot))
	(vp-ret)

(def-func-end)

(def-method 'nums :eql)
	;inputs
	;:r0 = nums object (ptr)
	;:r1 = nums object, can be same (ptr)
	;outputs
	;:r0 = nums object (ptr)
	;:r1 = 0 if eql, else not (long)
	;trashes
	;:r1-:r6

	(vp-def (src val src1 src2 src_end e0 e1))

	(entry 'nums :eql `(,src ,val))
	(gotoif `(,src = ,val) 'same)

	(assign `((,val array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,val ,src)) `(,src1 ,src2))
	(vp-xor-rr val val)
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-while-endswitch `(,src1 ,src2) `(,e0 ,e1) src_end
		(lambda (e0 e1)
			(continueif `(,e0 = ,e1))
			(vp-cpy-cr -1 val)))

	(exit 'nums :eql `(,src ,val))
	(vp-ret)
(vp-label 'same)
	(exit 'nums :eql `(,src 0))
	(vp-ret)

(def-func-end)

(def-method 'nums :hash)
	;inputs
	;:r0 = nums object (ptr)
	;outputs
	;:r0 = nums object (ptr)
	;:r1 = hash code (long)
	;trashes
	;:r1-:r4

	(vp-def (src val src1 src_end e0))

	(entry 'nums :hash `(,src))

	(assign `((,src array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src)) `(,src1))
	(vp-xor-rr val val)
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-while `(,src1) `(,e0) src_end :nil
		(lambda (e0) (vp-xor-rr e0 val)))
	(vp-abs-rr val val)

	(exit 'nums :hash `(,src ,val))
	(vp-ret)

(def-func-end)
