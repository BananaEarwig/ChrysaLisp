(include "lib/asm/func.inc")
(include "class/fixeds/class.inc")

(gen-create 'fixeds)
(gen-vtable 'fixeds)

(def-method 'fixeds :mul)
	;inputs
	;:r0 = fixeds object (ptr)
	;:r1 = source1 fixeds object, can be same (ptr)
	;:r2 = source2 fixeds object, can be same (ptr)
	;outputs
	;:r0 = fixeds object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r6

	(vp-def (dst src1 src2 dst1 src_end e0 e1))

	(entry 'fixeds :mul `(,dst ,src1 ,src2))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,src2 ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1) (vp-mul-rr e1 e0) (vp-asr-cr +fp_shift e0) e0))

	(exit 'fixeds :mul `(,dst -1))
	(vp-ret)

(def-func-end)

(def-method 'fixeds :div)
	;inputs
	;:r0 = fixeds object (ptr)
	;:r1 = source1 fixeds object, can be same (ptr)
	;:r2 = source2 fixeds object, can be same (ptr)
	;outputs
	;:r0 = fixeds object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r7

	(vp-def (e0 e1 high src1 src2 dst1 src_end dst))

	(entry 'fixeds :div `(,dst ,e1 ,high))

	(assign `((,e1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,e1 ,high ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1)
			(errorif `(,e1 = 0) 'error)
			(vp-shl-cr +fp_shift e0)
			(vp-ext-rr e0 high)
			(vp-div-rrr e1 high e0)
			e0))

	(exit 'fixeds :div `(,dst -1))
	(vp-ret)
(vp-label 'error)
	(exit 'fixeds :div `(,dst 0))
	(vp-ret)

(def-func-end)

(def-method 'fixeds :mod)
	;inputs
	;:r0 = fixeds object (ptr)
	;:r1 = source1 fixeds object, can be same (ptr)
	;:r2 = source2 fixeds object, can be same (ptr)
	;outputs
	;:r0 = fixeds object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r8

	(vp-def (e0 e1 high src1 src2 dst1 src_end dst t0))

	(entry 'fixeds :mod `(,dst ,e1 ,high))

	(assign `((,e1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,e1 ,high ,dst)) `(,src1 ,src2 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end dst1
		(lambda (e0 e1)
			(errorif `(,e1 = 0) 'error)
			(vp-cpy-rr e0 t0)
			(vp-shl-cr +fp_shift e0)
			(vp-ext-rr e0 high)
			(vp-div-rrr e1 high e0)
			(vp-asr-cr +fp_shift e0)
			(vp-mul-rr e0 e1)
			(vp-sub-rr e1 t0)
			t0))

	(exit 'fixeds :mod `(,dst -1))
	(vp-ret)
(vp-label 'error)
	(exit 'fixeds :mod `(,dst 0))
	(vp-ret)

(def-func-end)

(def-method 'fixeds :frac)
	;inputs
	;:r0 = fixeds object (ptr)
	;:r1 = source fixeds object, can be same (ptr)
	;outputs
	;:r0 = fixeds object (ptr)
	;trashes
	;:r1-:r5

	(vp-def (dst src1 dst1 src_end e0 t0))

	(entry 'fixeds :frac `(,dst ,src1))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,dst)) `(,src1 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1) `(,e0) src_end dst1
		(lambda (e0)
			(vpif `(,e0 >= 0))
				(vp-and-cr +fp_frac_mask e0)
			(else)
				(vp-cpy-rr e0 t0)
				(vp-cpy-cr (<< 1 +fp_shift) e0)
				(vp-and-cr +fp_frac_mask t0)
				(vp-sub-rr t0 e0)
			(endif) e0))

	(exit 'fixeds :frac `(,dst))
	(vp-ret)

(def-func-end)

(def-method 'fixeds :floor)
	;inputs
	;:r0 = fixeds object (ptr)
	;:r1 = source fixeds object, can be same (ptr)
	;outputs
	;:r0 = fixeds object (ptr)
	;trashes
	;:r1-:r4

	(vp-def (dst src1 dst1 src_end e0 t0))

	(entry 'fixeds :floor `(,dst ,src1))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,dst)) `(,src1 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1) `(,e0) src_end dst1
		(lambda (e0) (vp-and-cr +fp_int_mask e0) e0))

	(exit 'fixeds :floor `(,dst))
	(vp-ret)

(def-func-end)

(def-method 'fixeds :scale)
	;inputs
	;:r0 = fixeds object (ptr)
	;:r1 = source fixeds object, can be same (ptr)
	;:r2 = scale (fixed)
	;outputs
	;:r0 = fixeds object (ptr)
	;trashes
	;:r1-:r5

	(vp-def (dst src1 scale dst1 src_end e0))

	(entry 'fixeds :scale `(,dst ,src1 ,scale))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,src1 ,dst)) `(,src1 ,dst1))
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1) `(,e0) src_end dst1
		(lambda (e0) (vp-mul-rr scale e0) (vp-asr-cr +fp_shift e0) e0))

	(exit 'fixeds :scale `(,dst))
	(vp-ret)

(def-func-end)

(def-method 'fixeds :dot)
	;inputs
	;:r0 = fixeds object (ptr)
	;:r1 = fixeds object, can be same (ptr)
	;outputs
	;:r0 = fixeds object (ptr)
	;:r1 = dot product (fixed)
	;trashes
	;:r1-:r6

	(vp-def (src dot src1 src2 src_end e0 e1))

	(entry 'fixeds :dot `(,src1 ,dot))

	(assign `((,src1 array_length)) `(,src_end))
	(assign (map (# `(,%0 array_begin)) `(,dot ,src)) `(,src1 ,src2))
	(vp-xor-rr dot dot)
	(vp-shl-cr (log2 +ptr_size) src_end)
	(vp-add-rr src1 src_end)
	(vec-loop-until `(,src1 ,src2) `(,e0 ,e1) src_end :nil
		(lambda (e0 e1) (vp-mul-rr e0 e1) (vp-asr-cr +fp_shift e1) (vp-add-rr e1 dot)))

	(exit 'fixeds :dot `(,src ,dot))
	(vp-ret)

(def-func-end)
