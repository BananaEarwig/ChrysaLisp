(defun save-kv (kv)
	(cond
		((sym? kv) kv)
		((num? kv) (str kv))
		((cat "{" (str kv) "}"))))

(defun save-map (stream m i)
	(defq ws (pad "" i))
	(. m :each (lambda (k v)
		(unless (or (eql k :buffer) (eql k ":nil"))
			(write stream (cat ws "("))
			(write stream (save-kv k))
			(if (map? v)
				(progn (write-line stream "")
					(save-map stream v (+ i 2))
					(write-line stream (cat ws ")")))
				(write-line stream (cat " " (save-kv v) ")")))))))

(defun save-state ()
	;save editor state
	(when (defq stream (file-stream (cat *env_home* +state_filename) +file_open_write))
		(write-line stream "(:state")
		(save-map stream *meta_map* 2))
		(write-line stream ")"))

(defun load-map (stream)
	(defq state (Fmap) stack (list (rest (first (read stream (ascii-code " ")))) state))
	(while (defq m (pop stack) items (pop stack))
		(each (lambda (item)
			(bind '(k &rest v) item)
			(when (> (length v) 1)
				(push stack v (Fmap))
				(setq v (slice -2 -1 stack)))
			(. m :insert k (pop v))) items))
	state)

(defun load-state ()
	;load editor state
	(when (defq stream (file-stream (cat *env_home* +state_filename)))
		(setq *meta_map* (load-map stream))
		(bind '(file find_txt replace_txt files)
			(gather *meta_map* :file :find :replace :files))
		(. *find_text* :set_text find_txt)
		(. *replace_text* :set_text replace_txt)
		(. files :each (lambda (k v)
			(bind '(cx cy ax ay sx sy) (gather v :cx :cy :ax :ay :sx :sy))
			(when (/= (age k) 0)
				(unless (find k *open_files*) (push *open_files* k))
				(. v :insert :buffer :nil)
				(populate-buffer k cx cy ax ay sx sy))))
		(if (find file *open_files*) file)))
